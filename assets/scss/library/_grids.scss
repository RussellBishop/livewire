$gutter: 1rem;

[grid],
[class*='grid'], {
  display: flex;
  flex-wrap: wrap;
  margin-right: -#{$gutter};
  margin-bottom: -#{$gutter};

  > * {
    flex: 0 1 auto;
    margin-bottom: #{$gutter};
    padding-right: #{$gutter};
  }
}

[row],
[class*='row'], {
  display: flex;
  margin-right: -#{$gutter};

  > * {
    padding-right: #{$gutter};
  }
}

// [class*='grid-auto'] {
//   flex-flow: row wrap;
//   margin-right: -#{$gutter};

//   > * {
//     flex: 1;
//     flex-basis: 30ch; /* what to do here? */
//     flex-grow: 1;
//     margin-right: #{$gutter};
//     margin-bottom: #{$gutter};
//   }
// }

[class*='space-around'] {
  justify-content: space-around;
}

[class*='space-between'] {
  justify-content: space-between;
}

[class*='vertical-centre'] {
  align-items: center;
}

[class*='content-centre'] {
  justify-content: center;
}

.centre {
  margin-left: auto; margin-right: auto;
}

// .width {
//   $widths: 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100;

//   @each $width in $widths {
//     &-#{$width} {
//       width: percentage($width/100);
//     }
//   }
// }

$constraints: min, max;

@each $type in $constraints {
  .#{$type} {
    @for $i from 1 through 50 {
      &-#{$i} {
        #{$type}-width: #{$i}rem;
      }
    }
  }
}

.height {
  @for $i from 0 through 20 {
    &-#{$i} {
      height: #{$i}rem;
    }
  }
}

[class*='ratio'] {
  position: relative;

  &:before {
    display: block;
    width: 100%;
    content: '';
  }

  > * {
    @include absolute-fill;
  }
}

.ratio {
  $ratios: 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300;

  @each $ratio in $ratios {

    &-#{$ratio} {

      &:before {
        padding-bottom: #{$ratio}#{%};
      }
    }
  }
}


$gridColumns: 12;

.cell {
  @for $i from 1 through 12 {
    &-#{$i} {
      flex-basis: percentage($i/$gridColumns);
      max-width: percentage($i/$gridColumns);
    }
  }
}

@each $key, $value in $breakpoints {

  @media
  (min-width: #{map-get($value, min)}px) and
  (max-width: #{map-get($value, max)}px) {

    .cell-#{$key} {
      @for $i from 1 through 12 {
        &-#{$i} {
          flex-basis: percentage($i/$gridColumns);
          max-width: percentage($i/$gridColumns);
        }
      }
    }
  }
}

@mixin cell-auto {
  overflow: hidden;
  flex: 1;
}

.cell-auto {
  @include cell-auto;
}

@each $key, $value in $breakpoints {

  @media
  (min-width: #{map-get($value, min)}px) and
  (max-width: #{map-get($value, max)}px) {

    .cell-#{$key} {
      &-auto {
        @include cell-auto;
      }
    }
  }
}


/**
 * alternative selectors to consider:

 s-m {
  @media (min-width: s) and (max-width: m-max) {

  }
 }

 m-l {
  @media (min-width: m) {

  }
 }
*/


