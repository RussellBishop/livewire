$gutter: 1rem;

grid,
[grid],
[class*='grid'] {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  margin-bottom: $gutter * -1;

  > * {
    margin-bottom: $gutter;
  }

  /*
    Types
  */
  &[type="float-left"] {
    @include clearfix;
    display: block;

    > * {
      float: left;
      margin-right: $gutter;
    }
  }

  &[type="auto"] {

    > * {
      margin-right: $gutter;
    }
  }

  &[type="no-wrap"],
  &[type="nowrap"] {
    flex-wrap: nowrap;

    > * {
      margin-bottom: 0;
    }
  }

  &[margins="0"] {
    > * {
      margin-bottom: 0;
    }
  }

  &[margins=".5"] {
    > * {
      margin-bottom: .5rem;
    }
  }

  &[margins="1"] {
    > * {
      margin-bottom: .5rem;
    }
  }
}

flex,
[flex],
[class*='flex'] {
  display: flex;
}

grid,
[grid],
[class*='grid'],
flex,
[flex],
[class*='flex'] {
  /*
    Direction
  */
  &[direction="column"] {
    flex-direction: column;
  }

  /*
    Justify
  */
  &[justify="around"] {
    justify-content: space-around;
  }

  &[justify="between"] {
    justify-content: space-between;
  }

  &[justify="centre"],
  &[justify="center"] {
    justify-content: center;
  }

  /*
    Align
  */
  &[align="center"],
  &[align="centre"] {
    align-items: center;
  }

  &[align="start"] {
    align-items: start;
  }

  &[align="end"] {
    align-items: end;
  }

  &[align="stretch"] {
    align-items: stretch;
  }

}

.centre {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

$constraints: min, max;

@each $type in $constraints {
  .#{$type} {
    @for $i from 1 through 50 {
      &-#{$i} {
        #{$type}-width: #{$i}rem !important; // Important to overwrite our flex widths
      }
    }
  }
}

.height {
  @for $i from 0 through 20 {
    &-#{$i} {
      height: #{$i}rem;
    }
  }
}

$gridColumns: 12;

@each $key, $value in $breakpoints {

  @media
  (min-width: #{map-get($value, min)}px) and
  (max-width: #{map-get($value, max)}px) {

    @for $i from 1 through $gridColumns - 1 {
      [#{$key}="#{$i}"] {
        flex-basis: calc(#{percentage($i/$gridColumns)} - #{$gutter});
        max-width: calc(#{percentage($i/$gridColumns)} - #{$gutter});
      }
    }

    [#{$key}="12"] {
      flex-basis: 100%;
      max-width: 100%;
    }

    [#{$key}="auto"] {
      overflow: hidden;
      flex: 1;
    }
  }
}

@mixin cell-auto {
  overflow: hidden;
  flex: 1;
}

.cell-auto {
  @include cell-auto;
}

@each $key, $value in $breakpoints {

  @media
  (min-width: #{map-get($value, min)}px) and
  (max-width: #{map-get($value, max)}px) {

    .cell-#{$key} {
      &-auto {
        @include cell-auto;
      }
    }
  }
}
